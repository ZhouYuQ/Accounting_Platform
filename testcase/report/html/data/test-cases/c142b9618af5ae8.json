{
  "uid" : "c142b9618af5ae8",
  "name" : "login_2登记失败",
  "fullName" : "testcase.test_excel_case_动态关联.TestExcel#test_run",
  "historyId" : "f6f169be2249f2d613893db099678998",
  "time" : {
    "start" : 1577954141088,
    "stop" : 1577954141122,
    "duration" : 34
  },
  "status" : "broken",
  "statusMessage" : "TypeError: can only concatenate str (not \"dict\") to str",
  "statusTrace" : "self = <testcase.test_excel_case_动态关联.TestExcel object at 0x0000000004EFAAF0>\ncase = {'cookies': '', 'headers': '{\"appId\": \"N100696-L009\", \"digest\": \"\", \"records\": \"2\"}', 'status_code': 200.0, '前置条件': '', ...}\n\n    @pytest.mark.parametrize(\"case\", run_list)\n    def test_run(self, case):\n        # run_list第一个用例，用例key获取values(映射）\n        url =ConfigYaml().get_conf_url() + case[data_key.url]\n        print(\"url地址为:%s\"%url)\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        print(\"期望结果期望的数据类型是：%s\"%type(expect_result))\n        headers = case[data_key.headers]\n        cookies = case[data_key.cookies]\n        code = case[data_key.code]\n        print(\"期望的code是%s\" %code)\n        db_verify = case[data_key.db_verify]\n        # print(\"期望的sql是%s\" %db_verify)\n    \n    \n        # 验证前置条件\n        if pre_exec:\n    \n        # 找到执行的用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置测试用例的条件是：%s\"%pre_case)\n            pre_res = self.run_pre(pre_case)\n            headers, cookies = self.get_correlation(headers, cookies, pre_res)\n    \n        header = Base.json_parse(headers)\n        cookie = Base.json_parse(cookies)\n        res = self.run_api(url, method, params, header, cookie)\n        print(\"全部测试用例的执行结果是：%s\" % res)\n        print(\"实际结果数据类型是：%s\" % type(str(res[\"body\"])))\n    \n        #sheet名称feature一级标签\n        allure.dynamic.feature(sheet_name)\n        #模块story二级标签\n        allure.dynamic.story(case_model)\n        #用例id + 接口名称title\n        allure.dynamic.title(case_id+case_name)\n        #请求url 请求类型 期望结果 实际结果 描述Description\n    \n>       allure.dynamic.description(url+method+expect_result+res)\nE       TypeError: can only concatenate str (not \"dict\") to str\n\ntest_excel_case_动态关联.py:150: TypeError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: can only concatenate str (not \"dict\") to str",
    "statusTrace" : "self = <testcase.test_excel_case_动态关联.TestExcel object at 0x0000000004EFAAF0>\ncase = {'cookies': '', 'headers': '{\"appId\": \"N100696-L009\", \"digest\": \"\", \"records\": \"2\"}', 'status_code': 200.0, '前置条件': '', ...}\n\n    @pytest.mark.parametrize(\"case\", run_list)\n    def test_run(self, case):\n        # run_list第一个用例，用例key获取values(映射）\n        url =ConfigYaml().get_conf_url() + case[data_key.url]\n        print(\"url地址为:%s\"%url)\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        print(\"期望结果期望的数据类型是：%s\"%type(expect_result))\n        headers = case[data_key.headers]\n        cookies = case[data_key.cookies]\n        code = case[data_key.code]\n        print(\"期望的code是%s\" %code)\n        db_verify = case[data_key.db_verify]\n        # print(\"期望的sql是%s\" %db_verify)\n    \n    \n        # 验证前置条件\n        if pre_exec:\n    \n        # 找到执行的用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置测试用例的条件是：%s\"%pre_case)\n            pre_res = self.run_pre(pre_case)\n            headers, cookies = self.get_correlation(headers, cookies, pre_res)\n    \n        header = Base.json_parse(headers)\n        cookie = Base.json_parse(cookies)\n        res = self.run_api(url, method, params, header, cookie)\n        print(\"全部测试用例的执行结果是：%s\" % res)\n        print(\"实际结果数据类型是：%s\" % type(str(res[\"body\"])))\n    \n        #sheet名称feature一级标签\n        allure.dynamic.feature(sheet_name)\n        #模块story二级标签\n        allure.dynamic.story(case_model)\n        #用例id + 接口名称title\n        allure.dynamic.title(case_id+case_name)\n        #请求url 请求类型 期望结果 实际结果 描述Description\n    \n>       allure.dynamic.description(url+method+expect_result+res)\nE       TypeError: can only concatenate str (not \"dict\") to str\n\ntest_excel_case_动态关联.py:150: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a398886328103a84",
      "name" : "log",
      "source" : "a398886328103a84.txt",
      "type" : "text/plain",
      "size" : 53
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "会计平台"
  }, {
    "name" : "story",
    "value" : "登记"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_excel_case_动态关联"
  }, {
    "name" : "subSuite",
    "value" : "TestExcel"
  }, {
    "name" : "host",
    "value" : "18500096975"
  }, {
    "name" : "thread",
    "value" : "13848-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_excel_case_动态关联"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "{'用例id': 'login_2', '模块': '登记', '接口名称': '登记失败', '请求url': '/api/serial/checkin', '前置条件': '', '请求类型': 'POST', '请求参数类型': 'json', '请求参数': \"{'checkinList':[{'tranDate':'2020-01-02','srcNo':'0001025', 'eventCode':'JJGM001','prdCode':'JJGM','ccy':'156','amt':888.88,'aux1':'L009','aux2':'000083','aux4':'N100696C00008','extSet':{'companyCode':'N100696C00008','custno':'000000367699','purchaseFare':'35.79','purchaseDate':'20190130','orderNumber':'3390000002020','fundProductCode':'000083','companyName':'汇添富基金管理股份有限公司','fundProductName':'添富消费行业混合','redeemDate':'','redeemFare':'','fconfirmbalance':'6000','fundTypeName':'混合型','fconfirmshares':'','fundTypeCode':'mix','businessType':'02'}}]}\", '预期结果': \"{'resultCode': '1000', 'resultDesc': '操作成功', 'failureList': [{'eventCode': 'JJGM001', 'returnCode': '1006', 'tranDate': '2020-01-02', 'srcNo': '0001025', 'returnDesc': '数据库唯一约束冲突，数据重复'}]}\", '实际结果': '', '备注': '', '是否运行': 'y', 'headers': '{\"appId\": \"N100696-L009\", \"digest\": \"\", \"records\": \"2\"}', 'cookies': '', 'status_code': 200.0, '数据库验证': ''}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "c142b9618af5ae8.json",
  "parameterValues" : [ "{'用例id': 'login_2', '模块': '登记', '接口名称': '登记失败', '请求url': '/api/serial/checkin', '前置条件': '', '请求类型': 'POST', '请求参数类型': 'json', '请求参数': \"{'checkinList':[{'tranDate':'2020-01-02','srcNo':'0001025', 'eventCode':'JJGM001','prdCode':'JJGM','ccy':'156','amt':888.88,'aux1':'L009','aux2':'000083','aux4':'N100696C00008','extSet':{'companyCode':'N100696C00008','custno':'000000367699','purchaseFare':'35.79','purchaseDate':'20190130','orderNumber':'3390000002020','fundProductCode':'000083','companyName':'汇添富基金管理股份有限公司','fundProductName':'添富消费行业混合','redeemDate':'','redeemFare':'','fconfirmbalance':'6000','fundTypeName':'混合型','fconfirmshares':'','fundTypeCode':'mix','businessType':'02'}}]}\", '预期结果': \"{'resultCode': '1000', 'resultDesc': '操作成功', 'failureList': [{'eventCode': 'JJGM001', 'returnCode': '1006', 'tranDate': '2020-01-02', 'srcNo': '0001025', 'returnDesc': '数据库唯一约束冲突，数据重复'}]}\", '实际结果': '', '备注': '', '是否运行': 'y', 'headers': '{\"appId\": \"N100696-L009\", \"digest\": \"\", \"records\": \"2\"}', 'cookies': '', 'status_code': 200.0, '数据库验证': ''}" ]
}